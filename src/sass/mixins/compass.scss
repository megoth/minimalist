@import "../variables/compass";
@import "../functions/compass";

@mixin border-radius($radius...) {
  border-radius: $radius;
}

@mixin box-shadow($shadow...) {
  box-shadow: $shadow;
}

@mixin breadcrumb-background-color($alpha) {
  background: navigation-color($alpha);
  &:after {
    border-left-color: navigation-color($alpha);
  }
}

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin float($side: left) {
  float: unquote($side);
}

@mixin horizontal-list-container {
  @include reset-box-model;
  @include clearfix;
}

@mixin horizontal-list-item($padding: 4px, $direction: left) {
  @include no-bullet;
  white-space: nowrap;
  @include float($direction);
  @if $padding {
    padding: {
      left: $padding;
      right: $padding;
    };
    &:first-child {
      padding-#{$direction}: 0;
    }
    &:last-child {
      padding-#{opposite-position($direction)}: 0;
    }
  }
}

@mixin no-bullet {
  list-style-image: none;
  list-style-type: none;
  margin-left: 0;
}

@mixin reset-box-model {
  margin: 0;
  padding: 0;
  border: 0;
}

@mixin single-box-shadow($hoff: null, $voff: null, $blur: null, $spread: null, $color: null, $inset: $default-box-shadow-inset) {
  // Handle legacy argument order
  @if not ($hoff == none or $hoff == null) and type-of($hoff) != number {
    @warn "The $color argument for single-box-shadow is now the 5th argument instead of the 1st.";
    $tmp-color: $color;
    $color: $hoff;
    $hoff: $voff;
    $voff: $blur;
    $blur: $spread;
    $spread: $tmp-color;
  }
  // Need to set these defaults here instead of the arglist to support the above backwards compat handling
  @if $hoff == null {
    $hoff: $default-box-shadow-h-offset;
  }
  @if $voff == null {
    $hoff: $default-box-shadow-v-offset;
  }
  @if $blur == null {
    $blur: $default-box-shadow-blur;
  }
  @if $spread == null {
    $spread: $default-box-shadow-spread;
  }
  @if $color == null {
    $color: $default-box-shadow-color;
  }
  @if not ($inset == true or $inset == false or $inset == null or $inset == inset) {
    @warn "$inset expected to be true or the inset keyword. Got #{$inset} instead. Using: inset";
  }
  @if $hoff == none {
    @include box-shadow(none);
  }
  @else {
    $full: $hoff $voff;
    @if $blur {
      $full: $full $blur;
    }
    @if $spread {
      $full: $full $spread;
    }
    @if $color {
      $full: $full $color;
    }
    @if $inset {
      $full: inset $full;
    }
    @include box-shadow($full);
  }
}

@mixin text-shadow($shadow...) {
  $shadow: if(length($shadow) > 0, $shadow, default);
  $shadows-without-spread: join((), (), comma);
  $shadows: join((), (), comma);
  $has-spread: false;
  @each $layer in $shadow {
    $layer: if($layer == "default", $default, $layer);
    @if length($layer) > 4 {
      $has-spread: true;
      $shadows-without-spread: append($shadows-without-spread, nth($layer, 1) nth($layer, 2) nth($layer, 3) nth($layer, 5));
      $shadows: append($shadows, $layer);
    }
    @else {
      $shadows-without-spread: append($shadows-without-spread, $layer);
      $shadows: append($shadows, $layer);
    }
  }
  @if $has-spread {
    text-shadow: $shadows-without-spread;
  }
  text-shadow: $shadows;
}
